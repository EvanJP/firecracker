# coding: utf-8

"""
    Firecracker API

    RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.  # noqa: E501

    OpenAPI spec version: 0.23.0
    Contact: compute-capsule@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalloonStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_pages': 'int',
        'actual_pages': 'int',
        'target_mb': 'int',
        'actual_mb': 'int',
        'swap_in': 'int',
        'swap_out': 'int',
        'major_faults': 'int',
        'minor_faults': 'int',
        'free_memory': 'int',
        'total_memory': 'int',
        'available_memory': 'int',
        'disk_caches': 'int',
        'hugetlb_allocations': 'int',
        'hugetlb_failures': 'int'
    }

    attribute_map = {
        'target_pages': 'target_pages',
        'actual_pages': 'actual_pages',
        'target_mb': 'target_mb',
        'actual_mb': 'actual_mb',
        'swap_in': 'swap_in',
        'swap_out': 'swap_out',
        'major_faults': 'major_faults',
        'minor_faults': 'minor_faults',
        'free_memory': 'free_memory',
        'total_memory': 'total_memory',
        'available_memory': 'available_memory',
        'disk_caches': 'disk_caches',
        'hugetlb_allocations': 'hugetlb_allocations',
        'hugetlb_failures': 'hugetlb_failures'
    }

    def __init__(self, target_pages=None, actual_pages=None, target_mb=None, actual_mb=None, swap_in=None, swap_out=None, major_faults=None, minor_faults=None, free_memory=None, total_memory=None, available_memory=None, disk_caches=None, hugetlb_allocations=None, hugetlb_failures=None):  # noqa: E501
        """BalloonStats - a model defined in Swagger"""  # noqa: E501
        self._target_pages = None
        self._actual_pages = None
        self._target_mb = None
        self._actual_mb = None
        self._swap_in = None
        self._swap_out = None
        self._major_faults = None
        self._minor_faults = None
        self._free_memory = None
        self._total_memory = None
        self._available_memory = None
        self._disk_caches = None
        self._hugetlb_allocations = None
        self._hugetlb_failures = None
        self.discriminator = None
        self.target_pages = target_pages
        self.actual_pages = actual_pages
        self.target_mb = target_mb
        self.actual_mb = actual_mb
        if swap_in is not None:
            self.swap_in = swap_in
        if swap_out is not None:
            self.swap_out = swap_out
        if major_faults is not None:
            self.major_faults = major_faults
        if minor_faults is not None:
            self.minor_faults = minor_faults
        if free_memory is not None:
            self.free_memory = free_memory
        if total_memory is not None:
            self.total_memory = total_memory
        if available_memory is not None:
            self.available_memory = available_memory
        if disk_caches is not None:
            self.disk_caches = disk_caches
        if hugetlb_allocations is not None:
            self.hugetlb_allocations = hugetlb_allocations
        if hugetlb_failures is not None:
            self.hugetlb_failures = hugetlb_failures

    @property
    def target_pages(self):
        """Gets the target_pages of this BalloonStats.  # noqa: E501

        Target number of pages the device aims to hold.  # noqa: E501

        :return: The target_pages of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._target_pages

    @target_pages.setter
    def target_pages(self, target_pages):
        """Sets the target_pages of this BalloonStats.

        Target number of pages the device aims to hold.  # noqa: E501

        :param target_pages: The target_pages of this BalloonStats.  # noqa: E501
        :type: int
        """
        if target_pages is None:
            raise ValueError("Invalid value for `target_pages`, must not be `None`")  # noqa: E501

        self._target_pages = target_pages

    @property
    def actual_pages(self):
        """Gets the actual_pages of this BalloonStats.  # noqa: E501

        Actual number of pages the device is holding.  # noqa: E501

        :return: The actual_pages of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._actual_pages

    @actual_pages.setter
    def actual_pages(self, actual_pages):
        """Sets the actual_pages of this BalloonStats.

        Actual number of pages the device is holding.  # noqa: E501

        :param actual_pages: The actual_pages of this BalloonStats.  # noqa: E501
        :type: int
        """
        if actual_pages is None:
            raise ValueError("Invalid value for `actual_pages`, must not be `None`")  # noqa: E501

        self._actual_pages = actual_pages

    @property
    def target_mb(self):
        """Gets the target_mb of this BalloonStats.  # noqa: E501

        Target amount of memory (in MB) the device aims to hold.  # noqa: E501

        :return: The target_mb of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._target_mb

    @target_mb.setter
    def target_mb(self, target_mb):
        """Sets the target_mb of this BalloonStats.

        Target amount of memory (in MB) the device aims to hold.  # noqa: E501

        :param target_mb: The target_mb of this BalloonStats.  # noqa: E501
        :type: int
        """
        if target_mb is None:
            raise ValueError("Invalid value for `target_mb`, must not be `None`")  # noqa: E501

        self._target_mb = target_mb

    @property
    def actual_mb(self):
        """Gets the actual_mb of this BalloonStats.  # noqa: E501

        Actual amount of memory (in MB) the device is holding.  # noqa: E501

        :return: The actual_mb of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._actual_mb

    @actual_mb.setter
    def actual_mb(self, actual_mb):
        """Sets the actual_mb of this BalloonStats.

        Actual amount of memory (in MB) the device is holding.  # noqa: E501

        :param actual_mb: The actual_mb of this BalloonStats.  # noqa: E501
        :type: int
        """
        if actual_mb is None:
            raise ValueError("Invalid value for `actual_mb`, must not be `None`")  # noqa: E501

        self._actual_mb = actual_mb

    @property
    def swap_in(self):
        """Gets the swap_in of this BalloonStats.  # noqa: E501

        The amount of memory that has been swapped in (in bytes).  # noqa: E501

        :return: The swap_in of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._swap_in

    @swap_in.setter
    def swap_in(self, swap_in):
        """Sets the swap_in of this BalloonStats.

        The amount of memory that has been swapped in (in bytes).  # noqa: E501

        :param swap_in: The swap_in of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._swap_in = swap_in

    @property
    def swap_out(self):
        """Gets the swap_out of this BalloonStats.  # noqa: E501

        The amount of memory that has been swapped out to disk (in bytes).  # noqa: E501

        :return: The swap_out of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._swap_out

    @swap_out.setter
    def swap_out(self, swap_out):
        """Sets the swap_out of this BalloonStats.

        The amount of memory that has been swapped out to disk (in bytes).  # noqa: E501

        :param swap_out: The swap_out of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._swap_out = swap_out

    @property
    def major_faults(self):
        """Gets the major_faults of this BalloonStats.  # noqa: E501

        The number of major page faults that have occurred.  # noqa: E501

        :return: The major_faults of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._major_faults

    @major_faults.setter
    def major_faults(self, major_faults):
        """Sets the major_faults of this BalloonStats.

        The number of major page faults that have occurred.  # noqa: E501

        :param major_faults: The major_faults of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._major_faults = major_faults

    @property
    def minor_faults(self):
        """Gets the minor_faults of this BalloonStats.  # noqa: E501

        The number of minor page faults that have occurred.  # noqa: E501

        :return: The minor_faults of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._minor_faults

    @minor_faults.setter
    def minor_faults(self, minor_faults):
        """Sets the minor_faults of this BalloonStats.

        The number of minor page faults that have occurred.  # noqa: E501

        :param minor_faults: The minor_faults of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._minor_faults = minor_faults

    @property
    def free_memory(self):
        """Gets the free_memory of this BalloonStats.  # noqa: E501

        The amount of memory not being used for any purpose (in bytes).  # noqa: E501

        :return: The free_memory of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._free_memory

    @free_memory.setter
    def free_memory(self, free_memory):
        """Sets the free_memory of this BalloonStats.

        The amount of memory not being used for any purpose (in bytes).  # noqa: E501

        :param free_memory: The free_memory of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._free_memory = free_memory

    @property
    def total_memory(self):
        """Gets the total_memory of this BalloonStats.  # noqa: E501

        The total amount of memory available (in bytes).  # noqa: E501

        :return: The total_memory of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """Sets the total_memory of this BalloonStats.

        The total amount of memory available (in bytes).  # noqa: E501

        :param total_memory: The total_memory of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._total_memory = total_memory

    @property
    def available_memory(self):
        """Gets the available_memory of this BalloonStats.  # noqa: E501

        An estimate of how much memory is available (in bytes) for starting new applications, without pushing the system to swap.  # noqa: E501

        :return: The available_memory of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._available_memory

    @available_memory.setter
    def available_memory(self, available_memory):
        """Sets the available_memory of this BalloonStats.

        An estimate of how much memory is available (in bytes) for starting new applications, without pushing the system to swap.  # noqa: E501

        :param available_memory: The available_memory of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._available_memory = available_memory

    @property
    def disk_caches(self):
        """Gets the disk_caches of this BalloonStats.  # noqa: E501

        The amount of memory, in bytes, that can be quickly reclaimed without additional I/O. Typically these pages are used for caching files from disk.  # noqa: E501

        :return: The disk_caches of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._disk_caches

    @disk_caches.setter
    def disk_caches(self, disk_caches):
        """Sets the disk_caches of this BalloonStats.

        The amount of memory, in bytes, that can be quickly reclaimed without additional I/O. Typically these pages are used for caching files from disk.  # noqa: E501

        :param disk_caches: The disk_caches of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._disk_caches = disk_caches

    @property
    def hugetlb_allocations(self):
        """Gets the hugetlb_allocations of this BalloonStats.  # noqa: E501

        The number of successful hugetlb page allocations in the guest.  # noqa: E501

        :return: The hugetlb_allocations of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._hugetlb_allocations

    @hugetlb_allocations.setter
    def hugetlb_allocations(self, hugetlb_allocations):
        """Sets the hugetlb_allocations of this BalloonStats.

        The number of successful hugetlb page allocations in the guest.  # noqa: E501

        :param hugetlb_allocations: The hugetlb_allocations of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._hugetlb_allocations = hugetlb_allocations

    @property
    def hugetlb_failures(self):
        """Gets the hugetlb_failures of this BalloonStats.  # noqa: E501

        The number of failed hugetlb page allocations in the guest.  # noqa: E501

        :return: The hugetlb_failures of this BalloonStats.  # noqa: E501
        :rtype: int
        """
        return self._hugetlb_failures

    @hugetlb_failures.setter
    def hugetlb_failures(self, hugetlb_failures):
        """Sets the hugetlb_failures of this BalloonStats.

        The number of failed hugetlb page allocations in the guest.  # noqa: E501

        :param hugetlb_failures: The hugetlb_failures of this BalloonStats.  # noqa: E501
        :type: int
        """

        self._hugetlb_failures = hugetlb_failures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalloonStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalloonStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
