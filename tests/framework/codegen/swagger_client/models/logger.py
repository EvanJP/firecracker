# coding: utf-8

"""
    Firecracker API

    RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.  # noqa: E501

    OpenAPI spec version: 0.23.0
    Contact: compute-capsule@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Logger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'log_path': 'str',
        'show_level': 'bool',
        'show_log_origin': 'bool'
    }

    attribute_map = {
        'level': 'level',
        'log_path': 'log_path',
        'show_level': 'show_level',
        'show_log_origin': 'show_log_origin'
    }

    def __init__(self, level='Warning', log_path=None, show_level=False, show_log_origin=False):  # noqa: E501
        """Logger - a model defined in Swagger"""  # noqa: E501
        self._level = None
        self._log_path = None
        self._show_level = None
        self._show_log_origin = None
        self.discriminator = None
        if level is not None:
            self.level = level
        self.log_path = log_path
        if show_level is not None:
            self.show_level = show_level
        if show_log_origin is not None:
            self.show_log_origin = show_log_origin

    @property
    def level(self):
        """Gets the level of this Logger.  # noqa: E501

        Set the level. The possible values are case-insensitive.  # noqa: E501

        :return: The level of this Logger.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Logger.

        Set the level. The possible values are case-insensitive.  # noqa: E501

        :param level: The level of this Logger.  # noqa: E501
        :type: str
        """
        allowed_values = ["Error", "Warning", "Info", "Debug"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def log_path(self):
        """Gets the log_path of this Logger.  # noqa: E501

        Path to the named pipe or file for the human readable log output.  # noqa: E501

        :return: The log_path of this Logger.  # noqa: E501
        :rtype: str
        """
        return self._log_path

    @log_path.setter
    def log_path(self, log_path):
        """Sets the log_path of this Logger.

        Path to the named pipe or file for the human readable log output.  # noqa: E501

        :param log_path: The log_path of this Logger.  # noqa: E501
        :type: str
        """
        if log_path is None:
            raise ValueError("Invalid value for `log_path`, must not be `None`")  # noqa: E501

        self._log_path = log_path

    @property
    def show_level(self):
        """Gets the show_level of this Logger.  # noqa: E501

        Whether or not to output the level in the logs.  # noqa: E501

        :return: The show_level of this Logger.  # noqa: E501
        :rtype: bool
        """
        return self._show_level

    @show_level.setter
    def show_level(self, show_level):
        """Sets the show_level of this Logger.

        Whether or not to output the level in the logs.  # noqa: E501

        :param show_level: The show_level of this Logger.  # noqa: E501
        :type: bool
        """

        self._show_level = show_level

    @property
    def show_log_origin(self):
        """Gets the show_log_origin of this Logger.  # noqa: E501

        Whether or not to include the file path and line number of the log's origin.  # noqa: E501

        :return: The show_log_origin of this Logger.  # noqa: E501
        :rtype: bool
        """
        return self._show_log_origin

    @show_log_origin.setter
    def show_log_origin(self, show_log_origin):
        """Sets the show_log_origin of this Logger.

        Whether or not to include the file path and line number of the log's origin.  # noqa: E501

        :param show_log_origin: The show_log_origin of this Logger.  # noqa: E501
        :type: bool
        """

        self._show_log_origin = show_log_origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Logger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Logger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
