# coding: utf-8

"""
    Firecracker API

    RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.  # noqa: E501

    OpenAPI spec version: 0.23.0
    Contact: compute-capsule@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenBucket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'one_time_burst': 'int',
        'refill_time': 'int',
        'size': 'int'
    }

    attribute_map = {
        'one_time_burst': 'one_time_burst',
        'refill_time': 'refill_time',
        'size': 'size'
    }

    def __init__(self, one_time_burst=None, refill_time=None, size=None):  # noqa: E501
        """TokenBucket - a model defined in Swagger"""  # noqa: E501
        self._one_time_burst = None
        self._refill_time = None
        self._size = None
        self.discriminator = None
        if one_time_burst is not None:
            self.one_time_burst = one_time_burst
        self.refill_time = refill_time
        self.size = size

    @property
    def one_time_burst(self):
        """Gets the one_time_burst of this TokenBucket.  # noqa: E501

        The initial size of a token bucket.  # noqa: E501

        :return: The one_time_burst of this TokenBucket.  # noqa: E501
        :rtype: int
        """
        return self._one_time_burst

    @one_time_burst.setter
    def one_time_burst(self, one_time_burst):
        """Sets the one_time_burst of this TokenBucket.

        The initial size of a token bucket.  # noqa: E501

        :param one_time_burst: The one_time_burst of this TokenBucket.  # noqa: E501
        :type: int
        """

        self._one_time_burst = one_time_burst

    @property
    def refill_time(self):
        """Gets the refill_time of this TokenBucket.  # noqa: E501

        The amount of milliseconds it takes for the bucket to refill.  # noqa: E501

        :return: The refill_time of this TokenBucket.  # noqa: E501
        :rtype: int
        """
        return self._refill_time

    @refill_time.setter
    def refill_time(self, refill_time):
        """Sets the refill_time of this TokenBucket.

        The amount of milliseconds it takes for the bucket to refill.  # noqa: E501

        :param refill_time: The refill_time of this TokenBucket.  # noqa: E501
        :type: int
        """
        if refill_time is None:
            raise ValueError("Invalid value for `refill_time`, must not be `None`")  # noqa: E501

        self._refill_time = refill_time

    @property
    def size(self):
        """Gets the size of this TokenBucket.  # noqa: E501

        The total number of tokens this bucket can hold.  # noqa: E501

        :return: The size of this TokenBucket.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this TokenBucket.

        The total number of tokens this bucket can hold.  # noqa: E501

        :param size: The size of this TokenBucket.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenBucket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenBucket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
