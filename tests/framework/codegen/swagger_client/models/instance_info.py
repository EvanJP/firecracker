# coding: utf-8

"""
    Firecracker API

    RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.  # noqa: E501

    OpenAPI spec version: 0.23.0
    Contact: compute-capsule@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstanceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_name': 'str',
        'id': 'str',
        'started': 'bool',
        'vmm_version': 'str'
    }

    attribute_map = {
        'app_name': 'app_name',
        'id': 'id',
        'started': 'started',
        'vmm_version': 'vmm_version'
    }

    def __init__(self, app_name=None, id=None, started=None, vmm_version=None):  # noqa: E501
        """InstanceInfo - a model defined in Swagger"""  # noqa: E501
        self._app_name = None
        self._id = None
        self._started = None
        self._vmm_version = None
        self.discriminator = None
        self.app_name = app_name
        self.id = id
        self.started = started
        self.vmm_version = vmm_version

    @property
    def app_name(self):
        """Gets the app_name of this InstanceInfo.  # noqa: E501

        Application name.  # noqa: E501

        :return: The app_name of this InstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this InstanceInfo.

        Application name.  # noqa: E501

        :param app_name: The app_name of this InstanceInfo.  # noqa: E501
        :type: str
        """
        if app_name is None:
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def id(self):
        """Gets the id of this InstanceInfo.  # noqa: E501

        MicroVM / instance ID.  # noqa: E501

        :return: The id of this InstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstanceInfo.

        MicroVM / instance ID.  # noqa: E501

        :param id: The id of this InstanceInfo.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def started(self):
        """Gets the started of this InstanceInfo.  # noqa: E501

        The current detailed state of the Firecracker instance. This value is read-only for the control-plane.  # noqa: E501

        :return: The started of this InstanceInfo.  # noqa: E501
        :rtype: bool
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this InstanceInfo.

        The current detailed state of the Firecracker instance. This value is read-only for the control-plane.  # noqa: E501

        :param started: The started of this InstanceInfo.  # noqa: E501
        :type: bool
        """
        if started is None:
            raise ValueError("Invalid value for `started`, must not be `None`")  # noqa: E501

        self._started = started

    @property
    def vmm_version(self):
        """Gets the vmm_version of this InstanceInfo.  # noqa: E501

        MicroVM hypervisor build version.  # noqa: E501

        :return: The vmm_version of this InstanceInfo.  # noqa: E501
        :rtype: str
        """
        return self._vmm_version

    @vmm_version.setter
    def vmm_version(self, vmm_version):
        """Sets the vmm_version of this InstanceInfo.

        MicroVM hypervisor build version.  # noqa: E501

        :param vmm_version: The vmm_version of this InstanceInfo.  # noqa: E501
        :type: str
        """
        if vmm_version is None:
            raise ValueError("Invalid value for `vmm_version`, must not be `None`")  # noqa: E501

        self._vmm_version = vmm_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
