# coding: utf-8

"""
    Firecracker API

    RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.  # noqa: E501

    OpenAPI spec version: 0.23.0
    Contact: compute-capsule@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BootSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boot_args': 'str',
        'initrd_path': 'str',
        'kernel_image_path': 'str'
    }

    attribute_map = {
        'boot_args': 'boot_args',
        'initrd_path': 'initrd_path',
        'kernel_image_path': 'kernel_image_path'
    }

    def __init__(self, boot_args=None, initrd_path=None, kernel_image_path=None):  # noqa: E501
        """BootSource - a model defined in Swagger"""  # noqa: E501
        self._boot_args = None
        self._initrd_path = None
        self._kernel_image_path = None
        self.discriminator = None
        if boot_args is not None:
            self.boot_args = boot_args
        if initrd_path is not None:
            self.initrd_path = initrd_path
        self.kernel_image_path = kernel_image_path

    @property
    def boot_args(self):
        """Gets the boot_args of this BootSource.  # noqa: E501

        Kernel boot arguments  # noqa: E501

        :return: The boot_args of this BootSource.  # noqa: E501
        :rtype: str
        """
        return self._boot_args

    @boot_args.setter
    def boot_args(self, boot_args):
        """Sets the boot_args of this BootSource.

        Kernel boot arguments  # noqa: E501

        :param boot_args: The boot_args of this BootSource.  # noqa: E501
        :type: str
        """

        self._boot_args = boot_args

    @property
    def initrd_path(self):
        """Gets the initrd_path of this BootSource.  # noqa: E501

        Host level path to the initrd image used to boot the guest  # noqa: E501

        :return: The initrd_path of this BootSource.  # noqa: E501
        :rtype: str
        """
        return self._initrd_path

    @initrd_path.setter
    def initrd_path(self, initrd_path):
        """Sets the initrd_path of this BootSource.

        Host level path to the initrd image used to boot the guest  # noqa: E501

        :param initrd_path: The initrd_path of this BootSource.  # noqa: E501
        :type: str
        """

        self._initrd_path = initrd_path

    @property
    def kernel_image_path(self):
        """Gets the kernel_image_path of this BootSource.  # noqa: E501

        Host level path to the kernel image used to boot the guest  # noqa: E501

        :return: The kernel_image_path of this BootSource.  # noqa: E501
        :rtype: str
        """
        return self._kernel_image_path

    @kernel_image_path.setter
    def kernel_image_path(self, kernel_image_path):
        """Sets the kernel_image_path of this BootSource.

        Host level path to the kernel image used to boot the guest  # noqa: E501

        :param kernel_image_path: The kernel_image_path of this BootSource.  # noqa: E501
        :type: str
        """
        if kernel_image_path is None:
            raise ValueError("Invalid value for `kernel_image_path`, must not be `None`")  # noqa: E501

        self._kernel_image_path = kernel_image_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BootSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BootSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
