# coding: utf-8

"""
    Firecracker API

    RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.  # noqa: E501

    OpenAPI spec version: 0.23.0
    Contact: compute-capsule@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SnapshotLoadParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_diff_snapshots': 'bool',
        'mem_file_path': 'str',
        'snapshot_path': 'str',
        'resume_vm': 'bool'
    }

    attribute_map = {
        'enable_diff_snapshots': 'enable_diff_snapshots',
        'mem_file_path': 'mem_file_path',
        'snapshot_path': 'snapshot_path',
        'resume_vm': 'resume_vm'
    }

    def __init__(self, enable_diff_snapshots=None, mem_file_path=None, snapshot_path=None, resume_vm=None):  # noqa: E501
        """SnapshotLoadParams - a model defined in Swagger"""  # noqa: E501
        self._enable_diff_snapshots = None
        self._mem_file_path = None
        self._snapshot_path = None
        self._resume_vm = None
        self.discriminator = None
        if enable_diff_snapshots is not None:
            self.enable_diff_snapshots = enable_diff_snapshots
        self.mem_file_path = mem_file_path
        self.snapshot_path = snapshot_path
        if resume_vm is not None:
            self.resume_vm = resume_vm

    @property
    def enable_diff_snapshots(self):
        """Gets the enable_diff_snapshots of this SnapshotLoadParams.  # noqa: E501

        Enable support for incremental (diff) snapshots by tracking dirty guest pages.  # noqa: E501

        :return: The enable_diff_snapshots of this SnapshotLoadParams.  # noqa: E501
        :rtype: bool
        """
        return self._enable_diff_snapshots

    @enable_diff_snapshots.setter
    def enable_diff_snapshots(self, enable_diff_snapshots):
        """Sets the enable_diff_snapshots of this SnapshotLoadParams.

        Enable support for incremental (diff) snapshots by tracking dirty guest pages.  # noqa: E501

        :param enable_diff_snapshots: The enable_diff_snapshots of this SnapshotLoadParams.  # noqa: E501
        :type: bool
        """

        self._enable_diff_snapshots = enable_diff_snapshots

    @property
    def mem_file_path(self):
        """Gets the mem_file_path of this SnapshotLoadParams.  # noqa: E501

        Path to the file that contains the guest memory to be loaded.  # noqa: E501

        :return: The mem_file_path of this SnapshotLoadParams.  # noqa: E501
        :rtype: str
        """
        return self._mem_file_path

    @mem_file_path.setter
    def mem_file_path(self, mem_file_path):
        """Sets the mem_file_path of this SnapshotLoadParams.

        Path to the file that contains the guest memory to be loaded.  # noqa: E501

        :param mem_file_path: The mem_file_path of this SnapshotLoadParams.  # noqa: E501
        :type: str
        """
        if mem_file_path is None:
            raise ValueError("Invalid value for `mem_file_path`, must not be `None`")  # noqa: E501

        self._mem_file_path = mem_file_path

    @property
    def snapshot_path(self):
        """Gets the snapshot_path of this SnapshotLoadParams.  # noqa: E501

        Path to the file that contains the microVM state to be loaded.  # noqa: E501

        :return: The snapshot_path of this SnapshotLoadParams.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_path

    @snapshot_path.setter
    def snapshot_path(self, snapshot_path):
        """Sets the snapshot_path of this SnapshotLoadParams.

        Path to the file that contains the microVM state to be loaded.  # noqa: E501

        :param snapshot_path: The snapshot_path of this SnapshotLoadParams.  # noqa: E501
        :type: str
        """
        if snapshot_path is None:
            raise ValueError("Invalid value for `snapshot_path`, must not be `None`")  # noqa: E501

        self._snapshot_path = snapshot_path

    @property
    def resume_vm(self):
        """Gets the resume_vm of this SnapshotLoadParams.  # noqa: E501

        When set to true, the vm is also resumed if the snapshot load is successful.  # noqa: E501

        :return: The resume_vm of this SnapshotLoadParams.  # noqa: E501
        :rtype: bool
        """
        return self._resume_vm

    @resume_vm.setter
    def resume_vm(self, resume_vm):
        """Sets the resume_vm of this SnapshotLoadParams.

        When set to true, the vm is also resumed if the snapshot load is successful.  # noqa: E501

        :param resume_vm: The resume_vm of this SnapshotLoadParams.  # noqa: E501
        :type: bool
        """

        self._resume_vm = resume_vm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotLoadParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotLoadParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
