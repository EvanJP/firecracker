# coding: utf-8

"""
    Firecracker API

    RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.  # noqa: E501

    OpenAPI spec version: 0.23.0
    Contact: compute-capsule@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SnapshotCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mem_file_path': 'str',
        'snapshot_path': 'str',
        'snapshot_type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'mem_file_path': 'mem_file_path',
        'snapshot_path': 'snapshot_path',
        'snapshot_type': 'snapshot_type',
        'version': 'version'
    }

    def __init__(self, mem_file_path=None, snapshot_path=None, snapshot_type=None, version=None):  # noqa: E501
        """SnapshotCreateParams - a model defined in Swagger"""  # noqa: E501
        self._mem_file_path = None
        self._snapshot_path = None
        self._snapshot_type = None
        self._version = None
        self.discriminator = None
        self.mem_file_path = mem_file_path
        self.snapshot_path = snapshot_path
        if snapshot_type is not None:
            self.snapshot_type = snapshot_type
        if version is not None:
            self.version = version

    @property
    def mem_file_path(self):
        """Gets the mem_file_path of this SnapshotCreateParams.  # noqa: E501

        Path to the file that will contain the guest memory.  # noqa: E501

        :return: The mem_file_path of this SnapshotCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._mem_file_path

    @mem_file_path.setter
    def mem_file_path(self, mem_file_path):
        """Sets the mem_file_path of this SnapshotCreateParams.

        Path to the file that will contain the guest memory.  # noqa: E501

        :param mem_file_path: The mem_file_path of this SnapshotCreateParams.  # noqa: E501
        :type: str
        """
        if mem_file_path is None:
            raise ValueError("Invalid value for `mem_file_path`, must not be `None`")  # noqa: E501

        self._mem_file_path = mem_file_path

    @property
    def snapshot_path(self):
        """Gets the snapshot_path of this SnapshotCreateParams.  # noqa: E501

        Path to the file that will contain the microVM state.  # noqa: E501

        :return: The snapshot_path of this SnapshotCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_path

    @snapshot_path.setter
    def snapshot_path(self, snapshot_path):
        """Sets the snapshot_path of this SnapshotCreateParams.

        Path to the file that will contain the microVM state.  # noqa: E501

        :param snapshot_path: The snapshot_path of this SnapshotCreateParams.  # noqa: E501
        :type: str
        """
        if snapshot_path is None:
            raise ValueError("Invalid value for `snapshot_path`, must not be `None`")  # noqa: E501

        self._snapshot_path = snapshot_path

    @property
    def snapshot_type(self):
        """Gets the snapshot_type of this SnapshotCreateParams.  # noqa: E501

        Type of snapshot to create. It is optional and by default, a full snapshot is created.  # noqa: E501

        :return: The snapshot_type of this SnapshotCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_type

    @snapshot_type.setter
    def snapshot_type(self, snapshot_type):
        """Sets the snapshot_type of this SnapshotCreateParams.

        Type of snapshot to create. It is optional and by default, a full snapshot is created.  # noqa: E501

        :param snapshot_type: The snapshot_type of this SnapshotCreateParams.  # noqa: E501
        :type: str
        """
        allowed_values = ["Full", "Diff"]  # noqa: E501
        if snapshot_type not in allowed_values:
            raise ValueError(
                "Invalid value for `snapshot_type` ({0}), must be one of {1}"  # noqa: E501
                .format(snapshot_type, allowed_values)
            )

        self._snapshot_type = snapshot_type

    @property
    def version(self):
        """Gets the version of this SnapshotCreateParams.  # noqa: E501

        The microVM version for which we want to create the snapshot. It is optional and it defaults to the current version.  # noqa: E501

        :return: The version of this SnapshotCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SnapshotCreateParams.

        The microVM version for which we want to create the snapshot. It is optional and it defaults to the current version.  # noqa: E501

        :param version: The version of this SnapshotCreateParams.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotCreateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotCreateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
