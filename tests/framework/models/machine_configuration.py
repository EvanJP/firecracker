# coding: utf-8

"""
    Firecracker API

    RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.  # noqa: E501

    OpenAPI spec version: 0.23.0
    Contact: compute-capsule@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MachineConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_template': 'CpuTemplate',
        'ht_enabled': 'bool',
        'mem_size_mib': 'int',
        'track_dirty_pages': 'bool',
        'vcpu_count': 'int'
    }

    attribute_map = {
        'cpu_template': 'cpu_template',
        'ht_enabled': 'ht_enabled',
        'mem_size_mib': 'mem_size_mib',
        'track_dirty_pages': 'track_dirty_pages',
        'vcpu_count': 'vcpu_count'
    }

    def __init__(self, cpu_template=None, ht_enabled=None, mem_size_mib=None, track_dirty_pages=None, vcpu_count=None):  # noqa: E501
        """MachineConfiguration - a model defined in Swagger"""  # noqa: E501
        self._cpu_template = None
        self._ht_enabled = None
        self._mem_size_mib = None
        self._track_dirty_pages = None
        self._vcpu_count = None
        self.discriminator = None
        if cpu_template is not None:
            self.cpu_template = cpu_template
        self.ht_enabled = ht_enabled
        self.mem_size_mib = mem_size_mib
        if track_dirty_pages is not None:
            self.track_dirty_pages = track_dirty_pages
        self.vcpu_count = vcpu_count

    @property
    def cpu_template(self):
        """Gets the cpu_template of this MachineConfiguration.  # noqa: E501


        :return: The cpu_template of this MachineConfiguration.  # noqa: E501
        :rtype: CpuTemplate
        """
        return self._cpu_template

    @cpu_template.setter
    def cpu_template(self, cpu_template):
        """Sets the cpu_template of this MachineConfiguration.


        :param cpu_template: The cpu_template of this MachineConfiguration.  # noqa: E501
        :type: CpuTemplate
        """

        self._cpu_template = cpu_template

    @property
    def ht_enabled(self):
        """Gets the ht_enabled of this MachineConfiguration.  # noqa: E501

        Flag for enabling/disabling Hyperthreading  # noqa: E501

        :return: The ht_enabled of this MachineConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._ht_enabled

    @ht_enabled.setter
    def ht_enabled(self, ht_enabled):
        """Sets the ht_enabled of this MachineConfiguration.

        Flag for enabling/disabling Hyperthreading  # noqa: E501

        :param ht_enabled: The ht_enabled of this MachineConfiguration.  # noqa: E501
        :type: bool
        """
        if ht_enabled is None:
            raise ValueError("Invalid value for `ht_enabled`, must not be `None`")  # noqa: E501

        self._ht_enabled = ht_enabled

    @property
    def mem_size_mib(self):
        """Gets the mem_size_mib of this MachineConfiguration.  # noqa: E501

        Memory size of VM  # noqa: E501

        :return: The mem_size_mib of this MachineConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._mem_size_mib

    @mem_size_mib.setter
    def mem_size_mib(self, mem_size_mib):
        """Sets the mem_size_mib of this MachineConfiguration.

        Memory size of VM  # noqa: E501

        :param mem_size_mib: The mem_size_mib of this MachineConfiguration.  # noqa: E501
        :type: int
        """
        if mem_size_mib is None:
            raise ValueError("Invalid value for `mem_size_mib`, must not be `None`")  # noqa: E501

        self._mem_size_mib = mem_size_mib

    @property
    def track_dirty_pages(self):
        """Gets the track_dirty_pages of this MachineConfiguration.  # noqa: E501

        Enable dirty page tracking. If this is enabled, then incremental guest memory snapshots can be created. These belong to diff snapshots, which contain, besides the microVM state, only the memory dirtied since a previous snapshot. Full snapshots each contain a full copy of the guest memory.  # noqa: E501

        :return: The track_dirty_pages of this MachineConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._track_dirty_pages

    @track_dirty_pages.setter
    def track_dirty_pages(self, track_dirty_pages):
        """Sets the track_dirty_pages of this MachineConfiguration.

        Enable dirty page tracking. If this is enabled, then incremental guest memory snapshots can be created. These belong to diff snapshots, which contain, besides the microVM state, only the memory dirtied since a previous snapshot. Full snapshots each contain a full copy of the guest memory.  # noqa: E501

        :param track_dirty_pages: The track_dirty_pages of this MachineConfiguration.  # noqa: E501
        :type: bool
        """

        self._track_dirty_pages = track_dirty_pages

    @property
    def vcpu_count(self):
        """Gets the vcpu_count of this MachineConfiguration.  # noqa: E501

        Number of vCPUs (either 1 or an even number)  # noqa: E501

        :return: The vcpu_count of this MachineConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._vcpu_count

    @vcpu_count.setter
    def vcpu_count(self, vcpu_count):
        """Sets the vcpu_count of this MachineConfiguration.

        Number of vCPUs (either 1 or an even number)  # noqa: E501

        :param vcpu_count: The vcpu_count of this MachineConfiguration.  # noqa: E501
        :type: int
        """
        if vcpu_count is None:
            raise ValueError("Invalid value for `vcpu_count`, must not be `None`")  # noqa: E501

        self._vcpu_count = vcpu_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MachineConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MachineConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
