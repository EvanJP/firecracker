# coding: utf-8

"""
    Firecracker API

    RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.  # noqa: E501

    OpenAPI spec version: 0.23.0
    Contact: compute-capsule@amazon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartialNetworkInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iface_id': 'str',
        'rx_rate_limiter': 'RateLimiter',
        'tx_rate_limiter': 'RateLimiter'
    }

    attribute_map = {
        'iface_id': 'iface_id',
        'rx_rate_limiter': 'rx_rate_limiter',
        'tx_rate_limiter': 'tx_rate_limiter'
    }

    def __init__(self, iface_id=None, rx_rate_limiter=None, tx_rate_limiter=None):  # noqa: E501
        """PartialNetworkInterface - a model defined in Swagger"""  # noqa: E501
        self._iface_id = None
        self._rx_rate_limiter = None
        self._tx_rate_limiter = None
        self.discriminator = None
        self.iface_id = iface_id
        if rx_rate_limiter is not None:
            self.rx_rate_limiter = rx_rate_limiter
        if tx_rate_limiter is not None:
            self.tx_rate_limiter = tx_rate_limiter

    @property
    def iface_id(self):
        """Gets the iface_id of this PartialNetworkInterface.  # noqa: E501


        :return: The iface_id of this PartialNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._iface_id

    @iface_id.setter
    def iface_id(self, iface_id):
        """Sets the iface_id of this PartialNetworkInterface.


        :param iface_id: The iface_id of this PartialNetworkInterface.  # noqa: E501
        :type: str
        """
        if iface_id is None:
            raise ValueError("Invalid value for `iface_id`, must not be `None`")  # noqa: E501

        self._iface_id = iface_id

    @property
    def rx_rate_limiter(self):
        """Gets the rx_rate_limiter of this PartialNetworkInterface.  # noqa: E501


        :return: The rx_rate_limiter of this PartialNetworkInterface.  # noqa: E501
        :rtype: RateLimiter
        """
        return self._rx_rate_limiter

    @rx_rate_limiter.setter
    def rx_rate_limiter(self, rx_rate_limiter):
        """Sets the rx_rate_limiter of this PartialNetworkInterface.


        :param rx_rate_limiter: The rx_rate_limiter of this PartialNetworkInterface.  # noqa: E501
        :type: RateLimiter
        """

        self._rx_rate_limiter = rx_rate_limiter

    @property
    def tx_rate_limiter(self):
        """Gets the tx_rate_limiter of this PartialNetworkInterface.  # noqa: E501


        :return: The tx_rate_limiter of this PartialNetworkInterface.  # noqa: E501
        :rtype: RateLimiter
        """
        return self._tx_rate_limiter

    @tx_rate_limiter.setter
    def tx_rate_limiter(self, tx_rate_limiter):
        """Sets the tx_rate_limiter of this PartialNetworkInterface.


        :param tx_rate_limiter: The tx_rate_limiter of this PartialNetworkInterface.  # noqa: E501
        :type: RateLimiter
        """

        self._tx_rate_limiter = tx_rate_limiter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartialNetworkInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartialNetworkInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
